# GASPT 파일 및 폴더 구조
# Spec Kit v1.0

# 전체 폴더 구조
root_structure:
  Assets:
    _Project:
      description: "프로젝트 메인 폴더 (언더스코어로 최상단 배치)"
      subdirs:
        - Art
        - Scripts
        - Prefabs
        - Scenes
        - Settings

    Plugins:
      description: "재사용 가능한 코어 시스템 및 서드파티"
      subdirs:
        - FSM_Core
        - GAS_Core
        - ThirdParty

    StreamingAssets:
      description: "런타임 로드용 에셋"

# Scripts 폴더 구조 (가장 중요)
scripts_structure:
  Core:
    description: "핵심 시스템 (매니저, 유틸리티)"
    subdirs:
      Managers:
        purpose: "게임 매니저들 (GameFlowManager, SceneLoader 등)"
        pattern: "[Name]Manager.cs"
        base_class: SingletonManager<T>
        examples:
          - GameFlowManager.cs
          - SceneLoader.cs
          - SceneTransitionManager.cs
          - GameResourceManager.cs

      Utilities:
        purpose: "헬퍼 클래스, 확장 메서드"
        examples:
          - SingletonManager.cs
          - Extensions.cs
          - DebugHelper.cs

      Enums:
        purpose: "프로젝트 공용 Enum"
        examples:
          - SceneType.cs
          - DamageType.cs
          - ResourceCategory.cs

      Bootstrap:
        purpose: "게임 초기화 및 진입점"
        examples:
          - BootstrapManager.cs

  Gameplay:
    description: "게임플레이 로직"
    subdirs:
      Player:
        purpose: "플레이어 관련 시스템"
        assembly: Player.asmdef
        structure:
          - PlayerController.cs
          - CharacterPhysics.cs
          - InputHandler.cs
          - States/
            - PlayerIdleState.cs
            - PlayerMoveState.cs
            - PlayerJumpState.cs
            - PlayerAttackState.cs
            - PlayerDashState.cs
            - PlayerHitState.cs
            - PlayerDeathState.cs

      Combat:
        purpose: "전투 시스템"
        assembly: Combat.asmdef
        structure:
          - Core/
            - DamageSystem.cs
            - HealthSystem.cs
            - ComboSystem.cs
          - Hitbox/
            - HitboxController.cs
          - Attack/
            - BasicAttack.cs
            - AttackAnimationHandler.cs
          - Data/
            - DamageData.cs
            - HitData.cs
            - ComboData.cs

      Enemy:
        purpose: "적 AI 시스템"
        assembly: Enemy.asmdef
        structure:
          - EnemyController.cs
          - EnemyBaseState.cs
          - States/
            - EnemyIdleState.cs
            - EnemyPatrolState.cs
            - EnemyChaseState.cs
            - EnemyAttackState.cs
            - EnemyHitState.cs
            - EnemyDeathState.cs
          - Data/
            - EnemyData.cs

      Entities:
        purpose: "기타 게임 엔티티"
        examples:
          - NPC.cs
          - Projectile.cs

      Systems:
        purpose: "게임플레이 관련 시스템들"
        examples:
          - InventorySystem.cs
          - QuestSystem.cs

  UI:
    description: "UI 관련 스크립트"
    subdirs:
      HUD:
        purpose: "인게임 HUD"
        examples:
          - HUDManager.cs
          - HealthBarUI.cs
          - ItemSlotUI.cs
          - ResourcePanel.cs

      Menus:
        purpose: "메뉴 UI"
        examples:
          - MainMenu.cs
          - PauseMenu.cs
          - SettingsMenu.cs

  Data:
    description: "ScriptableObject 등 데이터"
    examples:
      - EnemyData.cs
      - ComboData.cs
      - SkullData.cs

  Tests:
    description: "테스트 및 데모 코드"
    subdirs:
      Demo:
        purpose: "데모 및 프로토타입"
        assembly: Combat.Demo.asmdef
        examples:
          - PlayerCombatDemo.cs
          - EnemyCombatDemo.cs

      Unit:
        purpose: "단위 테스트"
        examples:
          - DamageSystemTests.cs
          - ComboSystemTests.cs

  Editor:
    description: "에디터 확장 도구"
    examples:
      - SceneSetupTool.cs
      - HUDPrefabCreator.cs

# 네이밍 규칙
naming_conventions:
  folders:
    style: PascalCase
    use_plural: true
    examples:
      - Scripts
      - Prefabs
      - Animations
      - Materials

  special_prefix:
    underscore: "_Project (프로젝트 메인 폴더)"

  files:
    scripts:
      style: PascalCase
      suffix_rules:
        managers: Manager
        states: State
        data: Data
        systems: System
        controllers: Controller
        ui: UI
      examples:
        - PlayerController.cs
        - GameFlowManager.cs
        - PlayerAttackState.cs
        - EnemyData.cs
        - DamageSystem.cs
        - HealthBarUI.cs

    prefabs:
      style: PascalCase
      examples:
        - PlayerCharacter.prefab
        - FireballEffect.prefab
        - HUD.prefab

    scenes:
      style: PascalCase
      examples:
        - Bootstrap.unity
        - Gameplay.unity
        - Main.unity

    sprites:
      style: PascalCase
      descriptive: true
      examples:
        - PlayerIdle_01.png
        - EnemyWalk_02.png
        - ButtonBackground.png

# Assembly Definitions
assembly_definitions:
  naming_pattern: "[FolderName].asmdef"

  locations:
    - path: Assets/Plugins/FSM_Core
      name: FSM.Core.asmdef
      references: []

    - path: Assets/Plugins/GAS_Core
      name: GAS.Core.asmdef
      references: []

    - path: Assets/_Project/Scripts/Core/Utilities
      name: Core.Utilities.asmdef
      references: []

    - path: Assets/_Project/Scripts/Core/Managers
      name: Core.Managers.asmdef
      references: [FSM.Core, Core.Utilities]

    - path: Assets/_Project/Scripts/Gameplay/Combat
      name: Combat.asmdef
      references: [GAS.Core, FSM.Core, Core.Utilities]

    - path: Assets/_Project/Scripts/Gameplay/Player
      name: Player.asmdef
      references: [FSM.Core, Combat]

    - path: Assets/_Project/Scripts/Gameplay/Enemy
      name: Enemy.asmdef
      references: [FSM.Core, Combat]

    - path: Assets/_Project/Scripts/Tests/Demo
      name: Combat.Demo.asmdef
      references: [Combat, Player, Enemy, Core.Utilities]

# 파일 배치 규칙
file_placement_rules:
  Manager_classes:
    location: Assets/_Project/Scripts/Core/Managers/
    naming: "[Name]Manager.cs"
    base_class: SingletonManager<T>

  State_classes:
    location: "[Entity]/States/"
    naming: "[Entity][Action]State.cs"
    base_class: BaseState or GameState
    examples:
      - Assets/_Project/Scripts/Gameplay/Player/States/PlayerAttackState.cs
      - Assets/_Project/Scripts/Gameplay/Enemy/States/EnemyChaseState.cs

  Data_classes:
    location: "[System]/Data/"
    naming: "[Type]Data.cs"
    base_class: ScriptableObject
    examples:
      - Assets/_Project/Scripts/Gameplay/Enemy/Data/EnemyData.cs
      - Assets/_Project/Scripts/Gameplay/Combat/Data/ComboData.cs

  System_classes:
    location: Assets/_Project/Scripts/Gameplay/[System]/Core/
    naming: "[Name]System.cs"
    examples:
      - Assets/_Project/Scripts/Gameplay/Combat/Core/DamageSystem.cs
      - Assets/_Project/Scripts/Gameplay/Combat/Core/ComboSystem.cs

  UI_classes:
    location: Assets/_Project/Scripts/UI/[Category]/
    naming: "[Name]UI.cs or [Name]Panel.cs"
    examples:
      - Assets/_Project/Scripts/UI/HUD/HealthBarUI.cs
      - Assets/_Project/Scripts/UI/HUD/ResourcePanel.cs

  Demo_scripts:
    location: Assets/_Project/Scripts/Tests/Demo/
    naming: "[System]Demo.cs"
    examples:
      - PlayerCombatDemo.cs
      - EnemyCombatDemo.cs

  Editor_tools:
    location: Assets/_Project/Scripts/Editor/
    naming: "[Tool]Tool.cs or [Tool]Editor.cs"
    examples:
      - SceneSetupTool.cs
      - HUDPrefabCreator.cs

# 파일 크기 제한
file_size_limits:
  warning_lines: 500
  action: "500줄 이상이면 파일 분할 고려"

  splitting_strategies:
    - "상태별로 파일 분리 (GameState.cs → MainState.cs, LoadingState.cs 등)"
    - "기능별로 파일 분리 (PlayerController.cs → PlayerMovement.cs, PlayerCombat.cs 등)"
    - "Partial class 사용 (큰 UI Manager 등)"

# 문서 구조
documentation_structure:
  docs:
    getting-started:
      purpose: "프로젝트 시작 가이드"
      files:
        - QuickStart.md
        - ProjectOverview.md
        - FolderStructure.md
        - PlayerSetup.md
        - SceneSetupGuide.md

    development:
      purpose: "개발 문서"
      files:
        - CurrentStatus.md  # 가장 중요
        - CodingGuidelines.md
        - Roadmap.md
        - SkulSystemDesign.md

    infrastructure:
      purpose: "인프라 및 시스템 아키텍처"
      files:
        - SceneManagementSystem.md
        - EncodingGuide.md

    testing:
      purpose: "테스트 가이드"
      files:
        - TestingGuide.md

    archive:
      purpose: "작업 히스토리"
      files:
        - Worklog.md

# 권장사항
best_practices:
  do:
    - "새 에셋은 적절한 폴더에 즉시 생성"
    - "관련 파일들을 같은 폴더에 그룹화"
    - "일관된 네이밍 유지"
    - "정기적으로 불필요한 파일 정리"
    - "Assembly Definition 활용으로 컴파일 시간 단축"

  dont:
    - "Assets 루트에 파일 생성 금지"
    - "Temp, Test 등 임시 폴더 남용 금지"
    - "5단계 이상 깊은 폴더 구조 금지"
    - "모호한 네이밍 (Stuff, Misc, Other) 금지"
    - "중복 파일 생성 금지"

# 특수 폴더
special_folders:
  Resources:
    usage: "최소한으로 사용 (동적 로딩 필요 시에만)"
    alternative: "Addressables 또는 AssetBundle 선호"

  StreamingAssets:
    usage: "런타임에서 직접 접근해야 하는 파일"
    examples:
      - "동영상 파일"
      - "JSON/XML 데이터 파일"

  Editor:
    usage: "에디터 전용 스크립트"
    automatically_excluded: "빌드 시 자동 제외됨"

  Gizmos:
    usage: "Gizmos 아이콘 이미지"
    naming: "[ComponentName] Icon.png"

# 버전 관리 (.gitignore)
version_control:
  ignore_folders:
    - Library/
    - Temp/
    - Obj/
    - Build/
    - Builds/
    - Logs/

  ignore_files:
    - "*.csproj"
    - "*.unityproj"
    - "*.sln"
    - "*.user"
    - "*.userprefs"
    - "*.pidb"
    - "*.booproj"

  track_important:
    - ".gitattributes"
    - ".editorconfig"
    - "*.asmdef"
    - "*.md (문서)"
