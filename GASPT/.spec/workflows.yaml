# Claude Code 작업 워크플로우
# Spec Kit v1.0

# 작업 시작 전 필수 체크
pre_work_checklist:
  priority: CRITICAL

  step1_read_spec_files:
    description: "모든 .spec/*.yaml 파일 읽기"
    files:
      - .spec/project.yaml
      - .spec/coding-rules.yaml
      - .spec/architecture.yaml
      - .spec/workflows.yaml
    action: "Read 도구로 모든 파일 읽기"

  step2_check_current_status:
    description: "현재 프로젝트 상태 파악"
    file: docs/development/CurrentStatus.md
    check:
      - "최근 작업 내역"
      - "현재 Phase와 완료 작업"
      - "다음 작업 예정"
      - "수정된 버그 목록"
    action: "MUST READ - 가장 중요한 문서"

  step3_search_related_docs:
    description: "작업 관련 문서가 이미 있는지 확인"
    commands:
      - "find docs -name '*.md' | grep -i [키워드]"
      - "Grep: '[키워드]' pattern: 'docs/**/*.md'"
    warning: "이미 있는 문서를 중복 생성하지 않기!"

  step4_find_similar_code:
    description: "기존 코드 패턴 파악"
    mapping:
      Manager 작성:
        - GameFlowManager.cs
        - SceneLoader.cs
        - SceneTransitionManager.cs
      State 작성:
        - PlayerAttackState.cs
        - EnemyIdleState.cs
      UI 작성:
        - HealthBarUI.cs
        - HUDManager.cs
      Data 작성:
        - EnemyData.cs
        - ComboData.cs
    action: "같은 타입의 클래스를 먼저 Read하고 패턴 따르기"

# 코드 작성 프로세스
code_writing_process:
  step1_verify_naming:
    check:
      - "camelCase for private fields (NO underscores)"
      - "PascalCase for methods/properties"
      - "PascalCase for classes with suffix (Manager, State, Data)"
    reference: .spec/coding-rules.yaml#naming

  step2_verify_async_pattern:
    check:
      - "✅ async Awaitable"
      - "❌ IEnumerator, yield return"
    reference: .spec/coding-rules.yaml#async_patterns

  step3_verify_singleton:
    check:
      - "✅ SingletonManager<T>"
      - "✅ OnSingletonAwake()"
      - "❌ 수동 Singleton 구현"
    reference: .spec/architecture.yaml#managers

  step4_verify_unity_api:
    check:
      - "✅ FindAnyObjectByType"
      - "✅ linearVelocity"
      - "❌ FindObjectOfType (deprecated)"
      - "❌ velocity (deprecated)"
    reference: .spec/coding-rules.yaml#unity_api

  step5_check_assembly_def:
    check:
      - "새 폴더/시스템인가?"
      - ".asmdef 파일 필요한가?"
      - "순환 참조 없는가?"
    reference: .spec/architecture.yaml#assembly_references

# 코드 작성 중 체크포인트
checkpoints_during_coding:
  consistency_check:
    frequency: "매 클래스 작성마다"
    items:
      - "기존 코드와 변수명 스타일 일치"
      - "기존 코드와 주석 스타일 일치"
      - "기존 코드와 메서드 순서 일치"
      - "기존 코드와 using 순서 일치"

  pattern_following:
    rule: "같은 타입 클래스의 패턴을 정확히 따르기"
    example: |
      Manager 작성 시:
      1. 다른 Manager 클래스 Read
      2. 구조 파악 (상속, 초기화, 메서드 순서)
      3. 동일한 구조로 작성

  file_size_check:
    max_lines: 500
    action: "500줄 넘으면 파일 분할 고려"

# 코드 작성 후 검증
post_code_verification:
  step1_impact_analysis:
    description: "변경한 코드가 다른 파일에 영향 주는지 확인"
    commands:
      - "Grep: 'ChangedClassName' pattern: '*.cs' output_mode: 'files_with_matches'"
    check:
      - "참조하는 파일들 정상 작동 확인"
      - "컴파일 에러 없는지 확인"
      - "기존 기능 깨지지 않았는지 확인"

  step2_consistency_final_check:
    items:
      - "네이밍 규칙 일치"
      - "비동기 패턴 일치"
      - "주석 스타일 일치"
      - "코드 구조 일치"

  step3_test_plan:
    check:
      - "Demo 스크립트로 테스트 가능한가?"
      - "Unit Test 필요한가?"
      - "문서에 테스트 방법 추가했는가?"

# 문서 업데이트 가이드
documentation_update:
  when_to_update_current_status:
    triggers:
      - "새로운 시스템 완성"
      - "Phase 진행률 변경"
      - "버그 수정"
      - "주요 기능 추가"
      - "테스트 도구 추가"
    file: docs/development/CurrentStatus.md
    sections:
      - "## 최근 작업 - 오늘 작업 내용 추가"
      - "## 수정된 버그 - 버그 수정 시 추가"
      - "## 다음 작업 예정 - 새로운 할 일 추가"

  when_to_create_new_doc:
    triggers:
      - "새로운 시스템 설계서"
      - "새로운 가이드"
      - "데모 테스트 체크리스트"
    location_rules:
      설계_문서: docs/development/
      사용_가이드: docs/getting-started/
      테스트_가이드: docs/testing/
      시스템_아키텍처: docs/infrastructure/
      작업_일지: docs/archive/

  when_to_update_existing_doc:
    triggers:
      - "API 변경 (클래스 이름 변경 등)"
      - "구조 변경 (폴더 이동 등)"
      - "패턴 변경 (Singleton 방식 변경 등)"

# 자주 하는 실수 및 방지책
common_mistakes:
  - mistake: "기존 문서 확인 안 함"
    solution: "find docs -name '*.md' | grep -i [키워드]"
    example: "코딩 컨벤션 문서를 새로 만들려고 함 → 이미 CodingGuidelines.md 존재"

  - mistake: "기존 패턴 무시"
    solution: "같은 타입의 클래스를 먼저 Read하고 패턴 따르기"
    example: "Manager 작성 시 수동 Singleton 구현 → SingletonManager<T> 사용해야 함"

  - mistake: "코드 스타일 불일치"
    solution: "기존 코드의 변수명/메서드명 스타일 확인"
    example: "기존은 camelCase인데 snake_case 사용"

  - mistake: "Deprecated API 사용"
    solution: ".spec/coding-rules.yaml#unity_api 참조"
    example: "FindObjectOfType → FindAnyObjectByType"

  - mistake: "CurrentStatus.md 미업데이트"
    solution: "작업 완료 시 즉시 업데이트"
    impact: "다음 세션에서 같은 작업 중복"

  - mistake: "중복 작업"
    solution: "Grep으로 기존 구현 확인 후 재사용"
    example: "SingletonManager가 있는데 Singleton 새로 작성"

  - mistake: "영향 범위 미확인"
    solution: "Grep으로 참조하는 파일 찾고 모두 업데이트"
    example: "ResourceManager → GameResourceManager 변경 시 참조 업데이트 필요"

# 작업 시나리오별 가이드
scenarios:
  new_manager:
    steps:
      - "다른 Manager 클래스 Read (GameFlowManager, SceneLoader 등)"
      - "SingletonManager<T> 상속"
      - "OnSingletonAwake() 구현"
      - ".asmdef 확인 (Core.Managers.asmdef)"
      - "CurrentStatus.md 업데이트"

  new_state:
    steps:
      - "같은 Entity의 다른 State 클래스 Read"
      - "BaseState 또는 GameState 상속"
      - "OnEnter/OnExit/OnUpdate 구현"
      - "비동기 작업은 Awaitable 사용"
      - "FSM에 상태 등록"

  new_system:
    steps:
      - "설계 문서 먼저 작성 (docs/development/)"
      - ".asmdef 생성 (필요시)"
      - "참조 관계 확인 (순환 참조 방지)"
      - "Demo/Test 스크립트 작성"
      - "CurrentStatus.md 업데이트"

  refactoring:
    steps:
      - "변경 영향 범위 파악 (Grep)"
      - "관련 파일 모두 업데이트"
      - "컴파일 에러 확인"
      - "테스트 실행"
      - "문서 업데이트"

  bug_fix:
    steps:
      - "버그 재현 확인"
      - "근본 원인 파악"
      - "수정 적용"
      - "테스트 검증"
      - "CurrentStatus.md의 '수정된 버그' 섹션 업데이트"

# 결정 트리
decision_trees:
  should_create_new_file:
    question: "이 기능이 500줄 이상인가?"
    yes: "파일 분할 고려"
    no: "기존 파일에 추가"

  should_create_new_doc:
    question: "관련 문서가 이미 있는가?"
    check: "find docs -name '*.md' | grep -i [키워드]"
    yes: "기존 문서 수정"
    no: "새 문서 작성"

  should_use_singleton:
    question: "이 클래스가 게임 전체에서 하나만 존재하는가?"
    yes:
      question: "Manager 클래스인가?"
      yes: "SingletonManager<T> 사용"
      no: "일반 Singleton 패턴 (또는 static class)"
    no: "일반 클래스"

  should_create_asmdef:
    question: "새로운 독립 시스템인가?"
    yes: ".asmdef 생성"
    no:
      question: "주요 폴더인가? (Player, Combat, Enemy 등)"
      yes: ".asmdef 생성"
      no: "기존 어셈블리 사용"

# 빠른 참조
quick_reference:
  documents:
    - ".spec/project.yaml - 프로젝트 기본 정보"
    - ".spec/coding-rules.yaml - 코딩 규칙"
    - ".spec/architecture.yaml - 시스템 구조"
    - "docs/development/CurrentStatus.md - 현재 상황 (필수)"

  commands:
    find_docs: "find docs -name '*.md' | grep -i [키워드]"
    find_code: "Grep: '[클래스명]' pattern: '*.cs' output_mode: 'files_with_matches'"
    find_pattern: "Glob: '**/*Manager.cs' (또는 *State.cs, *Data.cs)"

  critical_rules:
    - "✅ Awaitable (❌ Coroutine)"
    - "✅ SingletonManager<T> (❌ 수동 Singleton)"
    - "✅ camelCase (❌ snake_case, _prefix)"
    - "✅ FindAnyObjectByType (❌ FindObjectOfType)"
    - "✅ linearVelocity (❌ velocity)"

# 성공 기준
success_criteria:
  - "중복 작업 없음"
  - "일관된 코드 스타일"
  - "기존 패턴 준수"
  - "문서 최신 상태"
  - "컴파일 에러 없음"
  - "테스트 통과"
  - "실수 최소화"
